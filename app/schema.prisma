datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String     @id @default(uuid())
  created_at           DateTime   @default(now())
  email                String?    @unique
  username             String?    @unique
  last_active          DateTime   @default(now())
  stripe_id            String?
  checkout_session_id  String?
  send_email           Boolean    @default(true)
  onboarding_complete  Boolean    @default(false)
  tour_complete        Boolean    @default(false)
  date_paid            DateTime?
  language             String     @default("en")
  credits              Int        @default(10)

  // Relations
  courses              Course[]
  topics              Topic[]
  exercises           Exercise[]
  feedback            Feedback[]
  organization        Organization? @relation(fields: [organization_id], references: [id])
  organization_id     String?
  deleted_at          DateTime?
  onboarding          Onboarding?

  @@index([email])
  @@index([username])
  @@index([organization_id])
  @@index([last_active])
}

model Onboarding {
  id                        String   @id @default(uuid())
  user_type                 String   // Student, Teacher, Parent, Professor, Other
  user_type_other          String?  // If user_type is Other
  learning_style           String?  // Visual, Auditory, Kinesthetic, Mixed

  // Subjects (multiple can be true)
  science_medicine         Boolean  @default(false)
  technology_engineering   Boolean  @default(false)
  business_economics      Boolean  @default(false)
  humanities_arts         Boolean  @default(false)
  language_learning       Boolean  @default(false)
  test_prep              Boolean  @default(false)
  subject_other          String?  // If other subject selected

  // Motivation factors (multiple can be true)
  motivation_progress     Boolean  @default(false)
  motivation_gamification Boolean  @default(false)
  motivation_reminders    Boolean  @default(false)
  motivation_community    Boolean  @default(false)
  motivation_tool_only    Boolean  @default(false)

  // Marketing sources (multiple can be true)
  source_twitter         Boolean  @default(false)
  source_instagram       Boolean  @default(false)
  source_tiktok         Boolean  @default(false)
  source_facebook       Boolean  @default(false)
  source_youtube        Boolean  @default(false)
  source_google         Boolean  @default(false)
  source_word_of_mouth  Boolean  @default(false)
  source_other          String?  // If other source selected

  feature_request       String?  // Optional feature request text

  user_id              String   @unique
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Organization {
  id                    String    @id @default(uuid())
  created_at            DateTime  @default(now())
  name                  String
  email_domain          String    @unique
  stripe_customer_id    String?
  subscription_status   String    @default("inactive")
  subscription_plan     String?
  seats                 Int       @default(0)
  users                 User[]

  @@index([email_domain])
  @@index([subscription_status])
}

model Feature {
  id                String    @id @default(uuid())
  name              String
  bounty            Int
  date              DateTime
  approved          Boolean   @default(false)
  completed         Boolean   @default(false)
  created_at        DateTime  @default(now())
  description       String?
  priority          Int       @default(1)
  assigned_to       String?
  estimated_hours   Float?
  actual_hours      Float?
  status            String    @default("pending")
  tags              String[]
  github_issue_url  String?
  completed_at      DateTime?

  @@index([status])
  @@index([assigned_to])
  @@index([completed])
}

model Course {
  id            String    @id @default(uuid())
  duplicate_id  String?
  name          String
  image         String
  description   String
  is_public     Boolean   @default(false)
  user_id       String
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  topics        Topic[]
  created_at    DateTime  @default(now())

  @@index([user_id])
  @@index([is_public])
}

model Topic {
  id          String     @id @default(uuid())
  name        String
  course_id   String
  user_id     String
  length      Int        @default(500)
  level       String     @default("Like I am a university student")
  course      Course     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  exercises   Exercise[]
  created_at  DateTime   @default(now())

  @@index([course_id])
  @@index([user_id])
}

enum ExerciseStatus {
  CREATED
  FILE_UPLOADED
  DOCUMENT_SCANNED
  EXERCISE_GENERATED
  EXERCISE_TAGGED
  SUMMARY_GENERATED
  QUESTIONS_GENERATED
  FINISHED
}

model Exercise {
  id                 String         @id @default(uuid())
  status             ExerciseStatus @default(CREATED)
  name               String
  lesson_text        String         @default("")
  modules            Json           @default("{}")
  audio_timestamps   String[]       @default([])
  level              String         @default("")
  cursor             Int            @default(0)
  word_count         Int            @default(0)
  completed          Boolean        @default(false)
  completed_at       DateTime?
  truncated          Boolean        @default(false)
  tokens             Int            @default(0)
  model              String         @default("gpt-4o-mini")
  user_evaluation    Int?           @default(0)
  questions          Question[]     @relation("ExerciseQuestions")
  user_id            String?        // Made optional since landing page tries won't have a user
  topic_id           String?
  topic              Topic?         @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  user               User?          @relation(fields: [user_id], references: [id], onDelete: Cascade) // Made optional
  created_at         DateTime       @default(now())
  demo_exercise      DemoExercise?

  @@index([user_id])
  @@index([topic_id])
  @@index([status])
  @@index([completed])
}

model DemoExercise {
  id                String    @id @default(uuid())
  created_at        DateTime  @default(now())

  // Visitor identification
  user_agent        String    // Browser and OS info
  browser_language  String?
  screen_resolution String?
  timezone          String?

  // Exercise details
  exercise_id       String    @unique
  exercise          Exercise  @relation(fields: [exercise_id], references: [id], onDelete: Cascade)

  @@index([user_agent])
  @@index([browser_language])
  @@index([screen_resolution]) 
  @@index([timezone])
  @@index([exercise_id])
}

model Question {
  id           String    @id @default(uuid())
  text         String
  exercise_id  String
  exercise     Exercise  @relation("ExerciseQuestions", fields: [exercise_id], references: [id], onDelete: Cascade)
  options      Option[]  @relation("QuestionOptions")
  created_at   DateTime  @default(now())

  @@index([exercise_id])
}

model Option {
  id           String    @id @default(uuid())
  text         String
  is_correct   Boolean   @default(false)
  question_id  String
  question     Question  @relation("QuestionOptions", fields: [question_id], references: [id], onDelete: Cascade)
  created_at   DateTime  @default(now())

  @@index([question_id])
  @@index([is_correct])
}

model Feedback {
  id               Int       @id @default(autoincrement())
  created_at       DateTime  @default(now())
  message          String
  email            String
  user_id          String
  user             User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // Additional feedback fields
  rating           Int       @default(0) // Overall rating out of 5
  usability        String?   // Feedback about app usability
  features         String?   // Feedback about specific features
  improvements     String?   // Suggestions for improvements
  would_recommend  Boolean   @default(false)
  experience_level String?   // User's typing/learning experience level
  browser_info     String?   // Technical context
  category         String    @default("GENERAL") // Category of feedback (BUG, FEATURE, GENERAL etc)
}

model Newsletter {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  email       String    @unique
  subscribed  Boolean   @default(true)
  source      String?   // Where the subscription came from
  ip_address  String?   // IP address at time of subscription
  user_agent  String?   // Browser/device info
  
  // Track engagement
  last_sent_at    DateTime?
  last_opened_at  DateTime?
  open_count      Int       @default(0)
  bounce_count    Int       @default(0)

  @@index([email])
  @@index([subscribed])
  @@index([last_sent_at]) 
}

model Logs {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now())
  message     String
  level       String
}

model ExerciseGeneratePrompt {
  id          Int       @id @default(autoincrement())
  user_id     String
  pre_prompt  String
  post_prompt String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}
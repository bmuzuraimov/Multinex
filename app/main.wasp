app Multinex {
  wasp: {
    version: "^0.15.2"
  },

  title: "Multinex",

  head: [
      "<!-- General Meta Tags -->",
      "<meta name='title' content='Multinex - Interactive Typing Exercises from Your Notes' />",
      "<meta name='description' content='Multinex converts your PDF lecture notes into interactive exercises, helping you actively engage with material and improve memory retention.' />",
      "<meta name='keywords' content='interactive typing exercises, PDF to exercises, active learning platform, Multinex, study tools, memory retention, efficient studying, AI-powered learning' />",
      "<meta name='author' content='Multinex Team' />",
      "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",

      "<!-- Open Graph Meta Tags for Social Sharing -->",
      "<meta property='og:type' content='website' />",
      "<meta property='og:title' content='Multinex - Interactive Typing Exercises from Your Notes' />",
      "<meta property='og:url' content='https://www.multinex.app' />",
      "<meta property='og:description' content='Turn your PDF lecture notes into interactive typing exercises with Multinex. Engage actively with your studies and improve learning retention.' />",
      "<meta property='og:image' content='https://www.multinex.app/public-banner.png' />",
      "<meta property='og:image:alt' content='Multinex - Convert PDFs into Interactive Exercises' />",
      "<meta property='og:locale' content='en_US' />",

      "<!-- Twitter Meta Tags -->",
      "<meta name='twitter:title' content='Multinex - Interactive Typing Exercises from Your Notes' />",
      "<meta name='twitter:description' content='Multinex helps you actively engage with your lecture notes by converting PDFs into interactive typing exercises for better memory retention.' />",
      "<meta name='twitter:image' content='https://www.multinex.app/public-banner.png' />",
      "<meta name='twitter:image:width' content='800' />",
      "<meta name='twitter:image:height' content='400' />",
      "<meta name='twitter:card' content='summary_large_image' />",

      "<!-- Canonical Link -->",
      "<link rel='canonical' href='https://www.multinex.app' />",

      "<!-- Analytics -->",
      "<script defer data-domain='multinex.app' src='https://plausible.io/js/script.js'></script>",
  ],

  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // Email-based authentication with verification and password reset
      email: {
        fromField: {
          name: "Multinex",
          email: "onboard@multinex.app"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email.js",
        },
        userSignupFields: import { getEmailUserFields } from "@src/server/auth/setUsername.js",
      },
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/server/auth/setUsername.js",
        configFn: import { getGoogleAuthConfig } from "@src/server/auth/setUsername.js",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/portal",
    onAfterSignup: import { onAfterSignup } from "@src/server/auth/hooks",
    onAfterLogin: import { onAfterLogin } from "@src/server/auth/hooks",
  },

  db: {
    seeds: []
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },
  emailSender: {
    provider: Mailgun,
    defaultFrom: {
      name: "Multinex",
      email: "auth@admin.multinex.app"
    },
  },
  // webSocket: {
  //   fn: import { webSocketFn } from "@src/server/websocket.js",
  //   autoConnect: false, // optional, default: true
  // },
}

/* üíΩ Wasp defines DB entities via Prisma Database Models:
 * https://wasp-lang.dev/docs/data-model/entities
 */




/* üì° These are the Wasp client Routes and Pages.
 * You can easily make them inaccessible to the unauthenticated user w/ 'authRequired: true'.
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/client/common/LandingPage"
}

route PublicCoursesRoute { path: "/public-courses", to: PublicCoursesPage }
page PublicCoursesPage {
  component: import PublicCoursesPage from "@src/client/common/PublicCoursesPage"
}

route GuidePageRoute { path: "/guide", to: GuidePage }
page GuidePage {
  component: import GuidePage from "@src/client/common/GuidePage"
}

route AboutPageRoute { path: "/about", to: AboutPage }
page AboutPage {
  component: import AboutPage from "@src/client/common/AboutPage"
}

route PrivacyPageRoute { path: "/privacy", to: PrivacyPage }
page PrivacyPage {
  component: import PrivacyPage from "@src/client/common/PrivacyPage"
}

route TermsPageRoute { path: "/terms", to: TermsPage }
page TermsPage {
  component: import TermsPage from "@src/client/common/TermsPage"
}

route CreateDemoRoute { path: "/create-demo", to: CreateDemoPage }
page CreateDemoPage {
  component: import CreateDemoPage from "@src/client/common/CreateDemoPage"
}

route DemoRoute { path: "/demo", to: DemoPage }
page DemoPage {
  component: import DemoPage from "@src/client/common/DemoPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/client/auth/SignupPage"
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/client/auth/EmailVerification",
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/client/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/client/auth/PasswordReset",
}

//#regio Portal Pages
route PortalRoute { path: "/portal", to: PortalPage }
page PortalPage {
  authRequired: true,
  component: import PortalPage from "@src/client/app/PortalPage"
}


route OnboardingPageRoute { path: "/onboarding", to: OnboardingPage }
page OnboardingPage {
  authRequired: true,
  component: import OnboardingPage from "@src/client/app/OnboardingPage"
}

route FeedbackRoute { path: "/feedback", to: FeedbackPage }
page FeedbackPage {
  authRequired: true,
  component: import FeedbackPage from "@src/client/app/FeedbackPage"
}

route CourseRoute { path: "/course/:id", to: CoursePage }
page CoursePage {
  authRequired: true,
  component: import CoursePage from "@src/client/app/CoursePage"
}

route ExerciseRoute { path: "/exercise/:exerciseId", to: ExercisePage }
page ExercisePage {
  authRequired: true,
  component: import ExercisePage from "@src/client/app/ExercisePage"
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/client/app/PricingPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/client/app/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/client/app/CheckoutPage"
}



/* ‚õë These are the Wasp Operations: server code that you can easily call
 * from the client. Queries fetch stuff, Actions modify/do stuff.
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// üìù Actions
action createNewsletter {
  fn: import { createNewsletter } from "@src/server/actions/newsletter.js",
  entities: [Newsletter]
}

action createFeedback {
  fn: import { createFeedback } from "@src/server/actions/feedback.js",
  entities: [Feedback]
}

action updatePrompt {
  fn: import { updatePrompt } from "@src/server/actions/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

action createOnboarding {
  fn: import { createOnboarding } from "@src/server/actions/onboarding.js",
  entities: [Onboarding]
}

action createFeature {
  fn: import { createFeature } from "@src/server/actions/features.js",
  entities: [Feature]
}

action createQuestion {
  fn: import { createQuestion } from "@src/server/actions/quiz.js",
  entities: [Question]
}

action createCourse {
  fn: import { createCourse } from "@src/server/actions/courses.js",
  entities: [Course]
}

action duplicateCourse {
  fn: import { duplicateCourse } from "@src/server/actions/courses.js",
  entities: [Course, Topic, Exercise, Question, Option]
}

action generateCourse {
  fn: import { generateCourse } from "@src/server/actions/courses.js",
  entities: [Topic, Course, User]
}

action updateCourse {
  fn: import { updateCourse } from "@src/server/actions/courses.js",
  entities: [Course]
}

action deleteCourse {
  fn: import { deleteCourse } from "@src/server/actions/courses.js",
  entities: [Course, Topic, Exercise, Question, Option]
}

action createTopic {
  fn: import { createTopic } from "@src/server/actions/topics.js",
  entities: [Topic]
}

action updateTopic {
  fn: import { updateTopic } from "@src/server/actions/topics.js",
  entities: [Topic]
}

action deleteTopic {
  fn: import { deleteTopic } from "@src/server/actions/topics.js",
  entities: [Topic, Exercise, Question, Option]
}

action createExercise {
  fn: import { createExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, User]
}

action generateExercise {
  fn: import { generateExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, User, ExerciseGeneratePrompt]
}

action shareExercise {
  fn: import { shareExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise]
}

action updateExercise {
  fn: import { updateExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise]
}

action deleteExercise {
  fn: import { deleteExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, Option]
}

action stripePayment {
  fn: import { stripePayment } from "@src/server/actions/payments.js",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/server/actions/users.js",
  entities: [User]
}

action createDemoExercise {
  fn: import { createDemoExercise } from "@src/server/actions/demoExercise.js",
  entities: [DemoExercise, Exercise]
}


// üìö Queries
query getUploadURL {
  fn: import { getUploadURL } from "@src/server/queries/file.js",
  entities: [User]
}

query getDownloadURL {
  fn: import { getDownloadURL } from "@src/server/queries/file.js",
  entities: [User]
}

query getPrompt {
  fn: import { getPrompt } from "@src/server/queries/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

query getAllCourses {
  fn: import { getAllCourses } from "@src/server/queries/courses.js",
  entities: [Course]
}

query getPublicCourses {
  fn: import { getPublicCourses } from "@src/server/queries/courses.js",
  entities: [Course]
}

query getFeedbackByUserId {
  fn: import { getFeedbackByUserId } from "@src/server/queries/feedbacks.js",
  entities: [Feedback]
}

query hasCompletedExercises {
  fn: import { hasCompletedExercises } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

query getCourseById {
  fn: import { getCourseById } from "@src/server/queries/courses.js",
  entities: [Course]
}

query getTopicsByCourse {
  fn: import { getTopicsByCourse } from "@src/server/queries/topics.js",
  entities: [Topic, Exercise]
}

query getExercisesWithNoTopic {
  fn: import { getExercisesWithNoTopic } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

query getExerciseById {
  fn: import { getExerciseById } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

query getDemoExercise {
  fn: import { getDemoExercise } from "@src/server/queries/demoExercise.js",
  entities: [DemoExercise]
}

/*
 * üì° These are custom Wasp API Endpoints.
 * Use them for callbacks, webhooks, API for other services to consume, etc.
 * https://wasp-lang.dev/docs/advanced/apis
 */

api stripeWebhook {
  fn: import { stripeWebhook } from "@src/server/webhooks/stripe.js",
  entities: [User],
  middlewareConfigFn: import { stripeMiddlewareFn } from "@src/server/webhooks/stripe.js",
  httpRoute: (POST, "/stripe-webhook")
}

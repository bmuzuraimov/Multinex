app Multinex {
  wasp: {
    version: "^0.15.2"
  },

  title: "Multinex",

  head: [
      "<!-- General Meta Tags -->",
      "<meta name='title' content='Multinex - Interactive Typing Exercises from Your Notes' />",
      "<meta name='description' content='Multinex converts your PDF lecture notes into interactive exercises, helping you actively engage with material and improve memory retention.' />",
      "<meta name='keywords' content='interactive typing exercises, PDF to exercises, active learning platform, Multinex, study tools, memory retention, efficient studying, AI-powered learning' />",
      "<meta name='author' content='Multinex Team' />",
      "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",

      "<!-- Open Graph Meta Tags for Social Sharing -->",
      "<meta property='og:type' content='website' />",
      "<meta property='og:title' content='Multinex - Interactive Typing Exercises from Your Notes' />",
      "<meta property='og:url' content='https://www.multinex.app' />",
      "<meta property='og:description' content='Turn your PDF lecture notes into interactive typing exercises with Multinex. Engage actively with your studies and improve learning retention.' />",
      "<meta property='og:image' content='https://www.multinex.app/public-banner.png' />",
      "<meta property='og:image:alt' content='Multinex - Convert PDFs into Interactive Exercises' />",
      "<meta property='og:locale' content='en_US' />",

      "<!-- Twitter Meta Tags -->",
      "<meta name='twitter:title' content='Multinex - Interactive Typing Exercises from Your Notes' />",
      "<meta name='twitter:description' content='Multinex helps you actively engage with your lecture notes by converting PDFs into interactive typing exercises for better memory retention.' />",
      "<meta name='twitter:image' content='https://www.multinex.app/public-banner.png' />",
      "<meta name='twitter:image:width' content='800' />",
      "<meta name='twitter:image:height' content='400' />",
      "<meta name='twitter:card' content='summary_large_image' />",

      "<!-- Canonical Link -->",
      "<link rel='canonical' href='https://www.multinex.app' />",

      "<!-- Analytics -->",
      "<script defer data-domain='multinex.app' src='https://plausible.io/js/script.js'></script>",
  ],

  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // Email-based authentication with verification and password reset
      email: {
        fromField: {
          name: "Multinex",
          email: "onboard@multinex.app"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email.js",
        },
        userSignupFields: import { getEmailUserFields } from "@src/server/auth/setUsername.js",
      },
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/server/auth/setUsername.js",
        configFn: import { getGoogleAuthConfig } from "@src/server/auth/setUsername.js",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/portal",
    onAfterSignup: import { onAfterSignup } from "@src/server/auth/hooks",
    onAfterLogin: import { onAfterLogin } from "@src/server/auth/hooks",
  },

  db: {
    seeds: []
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },
  emailSender: {
    provider: Mailgun,
    defaultFrom: {
      name: "Multinex",
      email: "auth@admin.multinex.app"
    },
  },
  // webSocket: {
  //   fn: import { webSocketFn } from "@src/server/websocket.js",
  //   autoConnect: false, // optional, default: true
  // },
}

/* üì° These are the Wasp client Routes and Pages.
 * You can easily make them inaccessible to the unauthenticated user w/ 'authRequired: true'.
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route LandingRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import Landing from "@src/client/common/pages/Landing"
}

route PublicCoursesRoute { path: "/public-courses", to: PublicCoursesPage }
page PublicCoursesPage {
  component: import PublicCourses from "@src/client/common/pages/PublicCourses"
}

route AboutRoute { path: "/about", to: AboutPage }
page AboutPage {
  component: import About from "@src/client/common/pages/About"
}

route PrivacyRoute { path: "/privacy", to: PrivacyPage }
page PrivacyPage {
  component: import Privacy from "@src/client/common/pages/Privacy"
}

route TermsRoute { path: "/terms", to: TermsPage }
page TermsPage {
  component: import Terms from "@src/client/common/pages/Terms"
}

route CreateDemoRoute { path: "/create-demo", to: CreateDemoPage }
page CreateDemoPage {
  component: import CreateDemo from "@src/client/common/pages/CreateDemo"
}

route DemoRoute { path: "/demo", to: DemoPage }
page DemoPage {
  component: import Demo from "@src/client/common/pages/Demo"
}
route SolutionsStudentsRoute { path: "/solutions/students", to: SolutionsStudentsPage }
page SolutionsStudentsPage {
  component: import SolutionsStudents from "@src/client/common/pages/SolutionsStudents"
}

route SolutionsTeachersRoute { path: "/solutions/teachers", to: SolutionsTeachersPage }
page SolutionsTeachersPage {
  component: import SolutionsTeachers from "@src/client/common/pages/SolutionsTeachers"
}


route PricingRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import Pricing from "@src/client/user/pages/Pricing"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/client/auth/pages/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/client/auth/pages/SignupPage"
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/client/auth/pages/EmailVerification",
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/client/auth/pages/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/client/auth/pages/PasswordReset",
}

//#regio Portal Pages
route PortalRoute { path: "/portal", to: PortalPage }
page PortalPage {
  authRequired: true,
  component: import Portal from "@src/client/user/pages/Portal"
}


route OnboardingRoute { path: "/onboarding", to: OnboardingPage }
page OnboardingPage {
  authRequired: true,
  component: import Onboarding from "@src/client/user/pages/Onboarding"
}

route FeedbackRoute { path: "/feedback", to: FeedbackPage }
page FeedbackPage {
  authRequired: true,
  component: import Feedback from "@src/client/user/pages/Feedback"
}

route CourseRoute { path: "/course/:id", to: CoursePage }
page CoursePage {
  component: import Course from "@src/client/user/pages/Course"
}

route ExerciseRoute { path: "/exercise/:exerciseId", to: ExercisePage }
page ExercisePage {
  component: import Exercise from "@src/client/user/pages/Exercise"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/client/user/pages/Account"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/client/user/pages/Checkout"
}



/* ‚õë These are the Wasp Operations: server code that you can easily call
 * from the client. Queries fetch stuff, Actions modify/do stuff.
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */
// ========== Actions and Queries ==========
// ===== User =====
query getUser {
  fn: import { getUser } from "@src/server/queries/user.js",
  entities: [User]
}

query getAllUsers {
  fn: import { getAllUsers } from "@src/server/queries/user.js", 
  entities: [User]
}

action createUser {
  fn: import { createUser } from "@src/server/actions/user.js",
  entities: [User]
}

action updateUser {
  fn: import { updateUser } from "@src/server/actions/user.js",
  entities: [User]
}

action deleteUser {
  fn: import { deleteUser } from "@src/server/actions/user.js",
  entities: [User]
}

// ===== ExercisePrompt =====
query getPrompt {
  fn: import { getPrompt } from "@src/server/queries/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

query getAllPrompts {
  fn: import { getAllPrompts } from "@src/server/queries/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

action createPrompt {
  fn: import { createPrompt } from "@src/server/actions/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

action updatePrompt {
  fn: import { updatePrompt } from "@src/server/actions/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

action deletePrompt {
  fn: import { deletePrompt } from "@src/server/actions/prompt.js",
  entities: [ExerciseGeneratePrompt]
}

// ===== Topic =====
query getTopic {
  fn: import { getTopic } from "@src/server/queries/topic.js",
  entities: [Topic]
}

query getAllTopics {
  fn: import { getAllTopics } from "@src/server/queries/topic.js",
  entities: [Topic]
}

action createTopic {
  fn: import { createTopic } from "@src/server/actions/topic.js",
  entities: [Topic]
}

action updateTopic {
  fn: import { updateTopic } from "@src/server/actions/topic.js",
  entities: [Topic]
}

action deleteTopic {
  fn: import { deleteTopic } from "@src/server/actions/topic.js",
  entities: [Topic, Exercise, Question, Option]
}

// ===== Exercise =====
query getExercise {
  fn: import { getExercise } from "@src/server/queries/exercise.js",
  entities: [Exercise]
}

query getAllExercises {
  fn: import { getAllExercises } from "@src/server/queries/exercise.js",
  entities: [Exercise]
}

action createExercise {
  fn: import { createExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, User]
}

action generateExercise {
  fn: import { generateExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, User, ExerciseGeneratePrompt]
}

action shareExercise {
  fn: import { shareExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise]
}

action updateExercise {
  fn: import { updateExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise]
}

action deleteExercise {
  fn: import { deleteExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, Option]
}


// ===== Onboarding =====
query getOnboarding {
  fn: import { getOnboarding } from "@src/server/queries/onboarding.js",
  entities: [Onboarding]
}

query getAllOnboardings {
  fn: import { getAllOnboardings } from "@src/server/queries/onboarding.js",
  entities: [Onboarding]
}

action createOnboarding {
  fn: import { createOnboarding } from "@src/server/actions/onboarding.js",
  entities: [Onboarding]
}

action updateOnboarding {
  fn: import { updateOnboarding } from "@src/server/actions/onboarding.js",
  entities: [Onboarding]
}

action deleteOnboarding {
  fn: import { deleteOnboarding } from "@src/server/actions/onboarding.js",
  entities: [Onboarding]
}
// ===== Organization =====
query getOrganization {
  fn: import { getOrganization } from "@src/server/queries/organization.js",
  entities: [Organization]
}

query getAllOrganizations {
  fn: import { getAllOrganizations } from "@src/server/queries/organization.js",
  entities: [Organization]
}

action createOrganization {
  fn: import { createOrganization } from "@src/server/actions/organization.js",
  entities: [Organization]
}

action updateOrganization {
  fn: import { updateOrganization } from "@src/server/actions/organization.js",
  entities: [Organization]
}

action deleteOrganization {
  fn: import { deleteOrganization } from "@src/server/actions/organization.js",
  entities: [Organization]
}

// ===== Course =====
query getCourse {
  fn: import { getCourse } from "@src/server/queries/course.js",
  entities: [Course]
}

query getAllCourses {
  fn: import { getAllCourses } from "@src/server/queries/course.js",
  entities: [Course]
}

action createCourse {
  fn: import { createCourse } from "@src/server/actions/course.js",
  entities: [Course]
}

action duplicateCourse {
  fn: import { duplicateCourse } from "@src/server/actions/course.js",
  entities: [Course, Topic, Exercise, Question, Option]
}

action updateCourse {
  fn: import { updateCourse } from "@src/server/actions/course.js",
  entities: [Course]
}

action deleteCourse {
  fn: import { deleteCourse } from "@src/server/actions/course.js",
  entities: [Course]
}

// ===== Demo Exercise =====
query getAllDemoExercises {
  fn: import { getAllDemoExercises } from "@src/server/queries/demoExercise.js",
  entities: [DemoExercise]
}

query getDemoExercise {
  fn: import { getDemoExercise } from "@src/server/queries/demoExercise.js",
  entities: [DemoExercise]
}

action createDemoExercise {
  fn: import { createDemoExercise } from "@src/server/actions/demoExercise.js",
  entities: [DemoExercise, Exercise]
}

action updateDemoExercise {
  fn: import { updateDemoExercise } from "@src/server/actions/demoExercise.js",
  entities: [DemoExercise]
}

action deleteDemoExercise {
  fn: import { deleteDemoExercise } from "@src/server/actions/demoExercise.js",
  entities: [DemoExercise]
}

// ===== Feature =====
query getFeature {
  fn: import { getFeature } from "@src/server/queries/feature.js",
  entities: [Feature]
}

query getAllFeatures {
  fn: import { getAllFeatures } from "@src/server/queries/feature.js",
  entities: [Feature]
}

action createFeature {
  fn: import { createFeature } from "@src/server/actions/feature.js",
  entities: [Feature]
}

action updateFeature {
  fn: import { updateFeature } from "@src/server/actions/feature.js",
  entities: [Feature]
}

action deleteFeature {
  fn: import { deleteFeature } from "@src/server/actions/feature.js",
  entities: [Feature]
}

// ===== Question =====
query getQuestion {
  fn: import { getQuestion } from "@src/server/queries/question.js",
  entities: [Question]
}

query getAllQuestions {
  fn: import { getAllQuestions } from "@src/server/queries/question.js",
  entities: [Question]
}

action createQuestion {
  fn: import { createQuestion } from "@src/server/actions/question.js",
  entities: [Question]
}

action updateQuestion {
  fn: import { updateQuestion } from "@src/server/actions/question.js",
  entities: [Question]
}

action deleteQuestion {
  fn: import { deleteQuestion } from "@src/server/actions/question.js",
  entities: [Question]
}

// ===== Option =====
query getOption {
  fn: import { getOption } from "@src/server/queries/option.js",
  entities: [Option]
}

query getAllOptions {
  fn: import { getAllOptions } from "@src/server/queries/option.js",
  entities: [Option]
}

action createOption {
  fn: import { createOption } from "@src/server/actions/option.js",
  entities: [Option]
}

action updateOption {
  fn: import { updateOption } from "@src/server/actions/option.js",
  entities: [Option]
}

action deleteOption {
  fn: import { deleteOption } from "@src/server/actions/option.js",
  entities: [Option]
}

// ===== Feedback =====
query getFeedback {
  fn: import { getFeedback } from "@src/server/queries/feedback.js",
  entities: [Feedback]
}

query getAllFeedback {
  fn: import { getAllFeedback } from "@src/server/queries/feedback.js",
  entities: [Feedback]
}

action createFeedback {
  fn: import { createFeedback } from "@src/server/actions/feedback.js",
  entities: [Feedback]
}

action updateFeedback {
  fn: import { updateFeedback } from "@src/server/actions/feedback.js",
  entities: [Feedback]
}

action deleteFeedback {
  fn: import { deleteFeedback } from "@src/server/actions/feedback.js",
  entities: [Feedback]
}

// ===== Newsletter =====
query getNewsletter {
  fn: import { getNewsletter } from "@src/server/queries/newsletter.js",
  entities: [Newsletter]
}

query getAllNewsletters {
  fn: import { getAllNewsletters } from "@src/server/queries/newsletter.js",
  entities: [Newsletter]
}

action createNewsletter {
  fn: import { createNewsletter } from "@src/server/actions/newsletter.js",
  entities: [Newsletter]
}

action updateNewsletter {
  fn: import { updateNewsletter } from "@src/server/actions/newsletter.js",
  entities: [Newsletter]
}

action deleteNewsletter {
  fn: import { deleteNewsletter } from "@src/server/actions/newsletter.js",
  entities: [Newsletter]
}

// Others
query getUploadURL {
  fn: import { getUploadURL } from "@src/server/queries/file.js",
  entities: [User]
}

query getDownloadURL {
  fn: import { getDownloadURL } from "@src/server/queries/file.js",
  entities: [User]
}

action stripePayment {
  fn: import { stripePayment } from "@src/server/actions/payments.js",
  entities: [User]
}


/*
 * üì° These are custom Wasp API Endpoints.
 * Use them for callbacks, webhooks, API for other services to consume, etc.
 * https://wasp-lang.dev/docs/advanced/apis
 */

api stripeWebhook {
  fn: import { stripeWebhook } from "@src/server/webhooks/stripe.js",
  entities: [User],
  middlewareConfigFn: import { stripeMiddlewareFn } from "@src/server/webhooks/stripe.js",
  httpRoute: (POST, "/stripe-webhook")
}

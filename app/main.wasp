app Typit {
  wasp: {
    version: "^0.13.2"
  },

  title: "Typeit",

  head: [
      "<!-- General Meta Tags -->",
      "<meta name='title' content='Typit - Interactive Typing Exercises from Your Notes' />",
      "<meta name='description' content='Typit converts your PDF lecture notes into interactive typing exercises, helping you actively engage with material and improve memory retention.' />",
      "<meta name='keywords' content='interactive typing exercises, PDF to exercises, active learning platform, Typit, study tools, memory retention, efficient studying, AI-powered learning' />",
      "<meta name='author' content='Typit Team' />",
      "<meta name='viewport' content='width=device-width, initial-scale=1.0' />",

      "<!-- Open Graph Meta Tags for Social Sharing -->",
      "<meta property='og:type' content='website' />",
      "<meta property='og:title' content='Typit - Interactive Typing Exercises from Your Notes' />",
      "<meta property='og:url' content='https://www.typit.app' />",
      "<meta property='og:description' content='Turn your PDF lecture notes into interactive typing exercises with Typit. Engage actively with your studies and improve learning retention.' />",
      "<meta property='og:image' content='https://www.typit.app/public-banner.png' />",
      "<meta property='og:image:alt' content='Typit - Convert PDFs into Interactive Exercises' />",
      "<meta property='og:locale' content='en_US' />",

      "<!-- Twitter Meta Tags -->",
      "<meta name='twitter:title' content='Typit - Interactive Typing Exercises from Your Notes' />",
      "<meta name='twitter:description' content='Typit helps you actively engage with your lecture notes by converting PDFs into interactive typing exercises for better memory retention.' />",
      "<meta name='twitter:image' content='https://www.typit.app/public-banner.png' />",
      "<meta name='twitter:image:width' content='800' />",
      "<meta name='twitter:image:height' content='400' />",
      "<meta name='twitter:card' content='summary_large_image' />",

      "<!-- Canonical Link -->",
      "<link rel='canonical' href='https://www.typit.app' />",

      "<!-- Analytics -->",
      "<script defer data-domain='typit.app' src='https://plausible.io/js/script.js'></script>",

      "<!-- Rewardful -->",
      "<script>(function(w,r){w._rwq=r;w[r]=w[r]||function(){(w[r].q=w[r].q||[]).push(arguments)}})(window,'rewardful');</script>",
      "<script async src='https://r.wdfl.co/rw.js' data-rewardful='b3bc2d'></script>",
  ],

  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    methods: {
      // Email-based authentication with verification and password reset
      email: {
        fromField: {
          name: "Typit",
          email: "onboard@typit.app"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email.js",
        },
        userSignupFields: import { getEmailUserFields } from "@src/server/auth/setUsername.js",
      },
      google: { // Guide for setting up Auth via Google
        userSignupFields: import { getGoogleUserFields } from "@src/server/auth/setUsername.js",
        configFn: import { getGoogleAuthConfig } from "@src/server/auth/setUsername.js",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/portal",
  },

  db: {
    system: PostgreSQL,
    seeds: []
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },
  emailSender: {
    provider: Mailgun,
    defaultFrom: {
      name: "Typit",
      email: "auth@admin.typit.app"
    },
  },
}

/* üíΩ Wasp defines DB entities via Prisma Database Models:
 * https://wasp-lang.dev/docs/data-model/entities
 */


entity User {=psl
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)

  stripeId                  String?
  checkoutSessionId         String?
  sendEmail                 Boolean         @default(false)
  datePaid                  DateTime?
  lang                      String          @default("en")
  tokens                    Int             @default(30000)

  // Relations
  courses                   Course[]
  topics                    Topic[]
  exercises                 Exercise[]
  feedbacks                 Feedback[]
  landingPageTry            LandingPageTry?
psl=}

entity LandingPageTry {=psl
  id                  String      @id @default(uuid())
  createdAt           DateTime    @default(now())
  
  // Client information
  ipAddress           String
  userAgent           String      // Browser and OS info
  browserLanguage     String?
  screenResolution    String?
  timezone           String?
  
  // Request details
  promptUsed          String      // What they tried to generate
  lessonText          String
  tokensUsed          Int         @default(0)
  successful          Boolean     @default(false)
  
  // If they later sign up, we can link it
  convertedUserId     String?     @unique
  convertedUser       User?       @relation(fields: [convertedUserId], references: [id])
psl=}

entity Feature {=psl
  id                String    @id @default(uuid())
  name              String
  bounty            Int
  date              DateTime
  approved          Boolean   @default(false)
  completed         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  description       String?
  priority          Int       @default(1)
  assignedTo        String?
  estimatedHours    Float?
  actualHours       Float?
  status            String    @default("pending")
  tags              String[]
  githubIssueUrl    String?
  completedAt       DateTime?
psl=}


entity Course {=psl
  id          String   @id @default(uuid())
  name        String
  image       String
  description String
  isPublic    Boolean   @default(false)
  userId      String 
  user        User     @relation(fields: [userId], references: [id])
  topics      Topic[]
  createdAt   DateTime @default(now())
psl=}

entity Topic {=psl
  id          String    @id @default(uuid())
  name        String
  courseId    String
  userId      String  
  length      Int       @default(500)
  level       String    @default("Like I am a university student")
  course      Course    @relation(fields: [courseId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  exercises   Exercise[]
  createdAt   DateTime  @default(now())
psl=}

entity Exercise {=psl
  id                  String      @id @default(uuid())
  name                String
  prompt              String
  promptImg           String      @default("/task1_prompt.png")
  lessonText          String
  paragraphSummary    String      @default("")
  level               String      @default("")
  no_words            Int         @default(0)
  completed           Boolean     @default(false)
  truncated           Boolean     @default(false)
  completedAt         DateTime?
  score               Int         @default(0)
  tokens              Int         @default(0)
  model               String      @default("gpt-4o-mini")
  userEvaluation      Int?        @default(0)
  questions           Question[]  @relation("ExerciseQuestions")
  userId              String
  topicId             String?
  topic               Topic?      @relation(fields: [topicId], references: [id])
  user                User        @relation(fields: [userId], references: [id])
  createdAt           DateTime    @default(now())
psl=}

entity Question {=psl
  id          String      @id @default(uuid())
  text        String
  exerciseId  String
  exercise    Exercise    @relation("ExerciseQuestions", fields: [exerciseId], references: [id])
  options     Option[]    @relation("QuestionOptions")
  createdAt   DateTime    @default(now())
psl=}

entity Option {=psl
  id          String      @id @default(uuid())
  text        String
  isCorrect   Boolean     @default(false)
  questionId  String
  question    Question    @relation("QuestionOptions", fields: [questionId], references: [id])
  createdAt   DateTime    @default(now())
psl=}


entity Feedback {=psl
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  email                    String
  userId                   String
  user                     User            @relation(fields: [userId], references: [id])
  
  // Additional feedback fields
  rating                   Int             @default(0)  // Overall rating out of 5
  usability               String?         // Feedback about app usability
  features                String?         // Feedback about specific features
  improvements            String?         // Suggestions for improvements
  wouldRecommend          Boolean         @default(false)
  experienceLevel         String?         // User's typing/learning experience level
  browserInfo             String?         // Technical context
  category                String          @default("GENERAL") // Category of feedback (BUG, FEATURE, GENERAL etc)
psl=}


entity Logs {=psl
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
psl=}

/* üì° These are the Wasp client Routes and Pages.
 * You can easily make them inaccessible to the unauthenticated user w/ 'authRequired: true'.
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/client/landing-page/LandingPage"
}

route PublicCoursesRoute { path: "/public-courses", to: PublicCoursesPage }
page PublicCoursesPage {
  component: import PublicCoursesPage from "@src/client/landing-page/PublicCoursesPage"
}

route GuidePageRoute { path: "/guide", to: GuidePage }
page GuidePage {
  component: import GuidePage from "@src/client/landing-page/GuidePage"
}

route AboutPageRoute { path: "/about", to: AboutPage }
page AboutPage {
  component: import AboutPage from "@src/client/landing-page/AboutPage"
}

route PrivacyPageRoute { path: "/privacy", to: PrivacyPage }
page PrivacyPage {
  component: import PrivacyPage from "@src/client/landing-page/PrivacyPage"
}

route TermsPageRoute { path: "/terms", to: TermsPage }
page TermsPage {
  component: import TermsPage from "@src/client/landing-page/TermsPage"
}

route DemoPageRoute { path: "/demo", to: DemoPage }
page DemoPage {
  component: import DemoPage from "@src/client/landing-page/DemoPage"
}

//#region Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/client/auth/SignupPage"
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/client/auth/EmailVerification",
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/client/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/client/auth/PasswordReset",
}

//#regio Portal Pages
route PortalRoute { path: "/portal", to: PortalPage }
page PortalPage {
  authRequired: true,
  component: import PortalPage from "@src/client/app/PortalPage"
}

route FeedbackRoute { path: "/feedback", to: FeedbackPage }
page FeedbackPage {
  authRequired: true,
  component: import FeedbackPage from "@src/client/app/FeedbackPage"
}

route CourseRoute { path: "/course-:id", to: CoursePage }
page CoursePage {
  authRequired: true,
  component: import CoursePage from "@src/client/app/CoursePage"
}

route ExerciseRoute { path: "/exercise-:exerciseId", to: ExercisePage }
page ExercisePage {
  authRequired: true,
  component: import ExercisePage from "@src/client/app/ExercisePage"
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/client/app/PricingPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/client/app/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/client/app/CheckoutPage"
}



/* ‚õë These are the Wasp Operations: server code that you can easily call
 * from the client. Queries fetch stuff, Actions modify/do stuff.
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// üìù Actions
action createFeedback {
  fn: import { createFeedback } from "@src/server/actions/feedback.js",
  entities: [Feedback]
}

action createFeature {
  fn: import { createFeature } from "@src/server/actions/features.js",
  entities: [Feature]
}

action updateFeature {
  fn: import { updateFeature } from "@src/server/actions/features.js",
  entities: [Feature]
}

// action createLandingPageTry {
//   fn: import { createLandingPageTry } from "@src/server/actions/landingPageTry.js",
//   entities: [LandingPageTry]
// }

action createQuestion {
  fn: import { createQuestion } from "@src/server/actions/quiz.js",
  entities: [Question]
}

action countTokens {
  fn: import { countTokens } from "@src/server/actions/utils.js",
  entities: []
}

action createCourse {
  fn: import { createCourse } from "@src/server/actions/courses.js",
  entities: [Course]
}

action duplicateCourse {
  fn: import { duplicateCourse } from "@src/server/actions/courses.js",
  entities: [Course, Topic, Exercise, Question, Option]
}

action generateCourse {
  fn: import { generateCourse } from "@src/server/actions/courses.js",
  entities: [Topic, Course, User]
}

action updateCourse {
  fn: import { updateCourse } from "@src/server/actions/courses.js",
  entities: [Course]
}

action deleteCourse {
  fn: import { deleteCourse } from "@src/server/actions/courses.js",
  entities: [Course, Topic, Exercise, Question, Option]
}

action createTopic {
  fn: import { createTopic } from "@src/server/actions/topics.js",
  entities: [Topic]
}

action updateTopic {
  fn: import { updateTopic } from "@src/server/actions/topics.js",
  entities: [Topic]
}

action deleteTopic {
  fn: import { deleteTopic } from "@src/server/actions/topics.js",
  entities: [Topic, Exercise, Question, Option]
}

action createExercise {
  fn: import { createExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, User]
}

action shareExercise {
  fn: import { shareExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise]
}

action updateExercise {
  fn: import { updateExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise]
}

action deleteExercise {
  fn: import { deleteExercise } from "@src/server/actions/exercises.js",
  entities: [Exercise, Question, Option]
}

action stripePayment {
  fn: import { stripePayment } from "@src/server/actions/payments.js",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/server/actions/users.js",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/server/actions/users.js",
  entities: [User]
}

action updateUserLang {
  fn: import { updateUserLang } from "@src/server/actions/users.js",
  entities: [User]
}


// üìö Queries

query getAllCourses {
  fn: import { getAllCourses } from "@src/server/queries/courses.js",
  entities: [Course]
}

query getPublicCourses {
  fn: import { getPublicCourses } from "@src/server/queries/courses.js",
  entities: [Course]
}

query getFeedbackByUserId {
  fn: import { getFeedbackByUserId } from "@src/server/queries/feedbacks.js",
  entities: [Feedback]
}

query hasCompletedExercises {
  fn: import { hasCompletedExercises } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

query getAllFeatures {
  fn: import { getAllFeatures } from "@src/server/queries/features.js",
  entities: [Feature]
}

query getCourseById {
  fn: import { getCourseById } from "@src/server/queries/courses.js",
  entities: [Course]
}

query getTopicsByCourse {
  fn: import { getTopicsByCourse } from "@src/server/queries/topics.js",
  entities: [Topic, Exercise]
}

query getExercisesWithNoTopic {
  fn: import { getExercisesWithNoTopic } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

query getExerciseById {
  fn: import { getExerciseById } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

query getDemoExercise {
  fn: import { getDemoExercise } from "@src/server/queries/exercises.js",
  entities: [Exercise]
}

/*
 * üì° These are custom Wasp API Endpoints.
 * Use them for callbacks, webhooks, API for other services to consume, etc.
 * https://wasp-lang.dev/docs/advanced/apis
 */

api stripeWebhook {
  fn: import { stripeWebhook } from "@src/server/webhooks/stripe.js",
  entities: [User],
  middlewareConfigFn: import { stripeMiddlewareFn } from "@src/server/webhooks/stripe.js",
  httpRoute: (POST, "/stripe-webhook")
}

/* üïµÔ∏è‚Äç‚ôÇÔ∏è These are the Wasp Jobs. Use them to set up recurring tasks and/or queues.
 * https://wasp-lang.dev/docs/advanced/jobs
 */

// job dailyStatsJob {
//   executor: PgBoss,
//   perform: {
//     fn: import { calculateDailyStats } from "@src/server/workers/calculateDailyStats.js"
//   },
//   schedule: {
//     cron: "0 * * * *" // every hour. useful in production
//     // cron: "* * * * *" // every minute. useful for debugging
//   },
//   entities: [User, DailyStats, Logs, PageViewSource]
// }
